/**
 *  Walter Cueva
 *  Assignment #10
 *  Graph Wiener Index based on Breath First Path
 *  7/23/18
 *  IT516

 * The Wiener index of a vertex is the sum of the shortest path distances between v and all other vertices.
 * The Wiener index of a graph G is the sum of the shortest path distances over all pairs of vertices.
 * It's used by chemists (vertices = atoms, edges = bonds).

 Modify DepthFirstPaths.java or BreadthFirstPaths.java to return the Wiener index of a graph.
 Find the shortest path distance for each pair of vertices, and sum all the shortest paths.
 Start with tinyCG.txt, an easy graph, which you can do by hand to check your algorithm.
 Then generate the Wiener Index for Wiener.txt. Submit your .java program and the Wiener Index.

 *
 */
import java.io.*;
import java.util.*;

import edu.princeton.cs.algs4.Graph;
import edu.princeton.cs.algs4.In;
import edu.princeton.cs.algs4.Queue;

public class BreadthFirstPaths {
    private static final int INFINITY = Integer.MAX_VALUE;
    private boolean[] marked;  // marked[v] = is there an s-v path
    private int[] edgeTo;      // edgeTo[v] = previous edge on shortest s-v path
    private int[] distTo;      // distTo[v] = number of edges shortest s-v path

    /**
     * Computes the shortest path between the source vertex {@code s}
     * and every other vertex in the graph {@code G}.
     * @param G the graph
     * @param s the source vertex
     * @throws IllegalArgumentException unless {@code 0 <= s < V}
     */
    public BreadthFirstPaths(Graph G, int s) {
        marked = new boolean[G.V()];
        distTo = new int[G.V()];
        edgeTo = new int[G.V()];
        validateVertex(s);
        bfs(G, s);

    }

    /**
     * Computes the shortest path between any one of the source vertices in {@code sources}
     * and every other vertex in graph {@code G}.
     * @param G the graph
     * @param sources the source vertices
     * @throws IllegalArgumentException unless {@code 0 <= s < V} for each vertex
     *         {@code s} in {@code sources}
     */
    public BreadthFirstPaths(Graph G, Iterable<Integer> sources) {
        marked = new boolean[G.V()];
        distTo = new int[G.V()];
        edgeTo = new int[G.V()];
        for (int v = 0; v < G.V(); v++)
            distTo[v] = INFINITY;
        validateVertices(sources);
        bfs(G, sources);
    }


    // breadth-first search from a single source
    private void bfs(Graph G, int s) {
        Queue<Integer> q = new Queue<Integer>();
        for (int v = 0; v < G.V(); v++)
            distTo[v] = INFINITY;
        distTo[s] = 0;
        marked[s] = true;
        q.enqueue(s);

        while (!q.isEmpty()) {
            int v = q.dequeue();
            for (int w : G.adj(v)) {
                if (!marked[w]) {
                    edgeTo[w] = v;
                    distTo[w] = distTo[v] + 1;
                    marked[w] = true;
                    q.enqueue(w);
                }
            }
        }
    }

    // breadth-first search from multiple sources
    private void bfs(Graph G, Iterable<Integer> sources) {
        Queue<Integer> q = new Queue<Integer>();
        for (int s : sources) {
            marked[s] = true;
            distTo[s] = 0;
            q.enqueue(s);
        }
        while (!q.isEmpty()) {
            int v = q.dequeue();
            for (int w : G.adj(v)) {
                if (!marked[w]) {
                    edgeTo[w] = v;
                    distTo[w] = distTo[v] + 1;
                    marked[w] = true;
                    q.enqueue(w);
                }
            }
        }
    }

    /**
     * Is there a path between the source vertex {@code s} (or sources) and vertex {@code v}?
     * @param v the vertex
     * @return {@code true} if there is a path, and {@code false} otherwise
     * @throws IllegalArgumentException unless {@code 0 <= v < V}
     */
    public boolean hasPathTo(int v) {
        validateVertex(v);
        return marked[v];
    }

    /**
     * Returns the number of edges in a shortest path between the source vertex {@code s}
     * (or sources) and vertex {@code v}?
     * @param v the vertex
     * @return the number of edges in a shortest path
     * @throws IllegalArgumentException unless {@code 0 <= v < V}
     */
    public int distTo(int v) {
        validateVertex(v);
        return distTo[v];
    }

    /**
     * Returns a shortest path between the source vertex {@code s} (or sources)
     * and {@code v}, or {@code null} if no such path.
     * @param  v the vertex
     * @return the sequence of vertices on a shortest path, as an Iterable
     * @throws IllegalArgumentException unless {@code 0 <= v < V}
     */
    public Iterable<Integer> pathTo(int v) {
        validateVertex(v);
        if (!hasPathTo(v)) return null;
        Stack<Integer> path = new Stack<Integer>();
        int x;
        for (x = v; distTo[x] != 0; x = edgeTo[x])
            path.push(x);
        path.push(x);
        return path;
    }

    /**
     * Returns a shortest path size between the source vertex {@code s} (or sources)
     * and {@code v}, or {@code null} if no such path.
     * @param  v the vertex
     * @return the size of shortest path
     * @throws IllegalArgumentException unless {@code 0 <= v < V}
     */
    public int pathSize(int v) {
        validateVertex(v);
        if (!hasPathTo(v)) return 0;
        Stack<Integer> path = new Stack<Integer>();
        int x;
        for (x = v; distTo[x] != 0; x = edgeTo[x])
            path.push(x);
        path.push(x);
        return path.size() - 1;
    }




    // throw an IllegalArgumentException unless {@code 0 <= v < V}
    private void validateVertex(int v) {
        int V = marked.length;
        if (v < 0 || v >= V)
            throw new IllegalArgumentException("vertex " + v + " is not between 0 and " + (V-1));
    }

    // throw an IllegalArgumentException unless {@code 0 <= v < V}
    private void validateVertices(Iterable<Integer> vertices) {
        if (vertices == null) {
            throw new IllegalArgumentException("argument is null");
        }
        int V = marked.length;
        for (int v : vertices) {
            if (v < 0 || v >= V) {
                throw new IllegalArgumentException("vertex " + v + " is not between 0 and " + (V-1));
            }
        }
    }

    /**
     * Unit tests the {@code BreadthFirstPaths} data type.
     *
     * @param args the command-line arguments
     */
    public static void main(String[] args) {
        // read file name
        In in = new In(new File("/Users/WalterCueva/Desktop/Wiener.txt"));

        // Create Graph
        Graph G = new Graph(in);

        // get num vertices
        int numVertices = G.V();

        // wiener index
        int index = 0;

        // for each vertex
        for (int from = 0; from < numVertices; from++) {
            // create breadth first path from current vertex
            BreadthFirstPaths breadthFirstPaths = new BreadthFirstPaths(G, from);

            int vertexIndex = 0;

            // for each pair
            for (int to = 0; to < numVertices; to++) {
                vertexIndex += breadthFirstPaths.pathSize(to); // get size and add to index
            }

            System.out.println("Wiener index of vertex "+ from + " is " + vertexIndex);

            index += vertexIndex;
        }


        // print wiener index
        System.out.println("\nWiener Index of graph is "+index);
    }


}

/**

 Vertex 0 Wiener Index:	35
 Vertex 1 Wiener Index:	36
 Vertex 2 Wiener Index:	32
 Vertex 3 Wiener Index:	47
 Vertex 4 Wiener Index:	47
 Vertex 5 Wiener Index:	32
 Vertex 6 Wiener Index:	27
 Vertex 7 Wiener Index:	29
 Vertex 8 Wiener Index:	37
 Vertex 9 Wiener Index:	37
 Vertex 10 Wiener Index:	45
 Vertex 11 Wiener Index:	45
 Vertex 12 Wiener Index:	35
 Vertex 13 Wiener Index:	40

 Graph Wiener Index: 	524


 Process finished with exit code 0
*/


